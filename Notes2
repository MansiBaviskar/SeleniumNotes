  Day-22
---------
Direct locaters
id
name
linkText
partialLinkText

access group of web elements/ multilple elements
TagName
classname

customizsed locators that cannot be directly fetched from html can be retrived from 3rd party tools or create our own paths
CSS selector
XPath


<input type="text" name="search" value="" placeholder="Search" class="form-control form-control-lg">
every element is associated with a tag name and has certrain number of attributes
locators are found from the html
input - tagname
type, name, value, placeholder ---> attributes/properties

name="search"
name--> attribute
search ---> value

findElement(By.id("search")) ----> WebElement

findElement(By.name("search")) ----> WebElement

WebElement searchBox=driver.findElement(By.name("search"));


Ctrl +Shift+O  --> importing packages.


String s="welcome";
s.lenght()

"welcome".lenght();



Employee emp=new Employee();
emp.display();

new Employee().display();


<a href="http://www.xyz.com">Click</a>

booklets

By.partialLinkText("lets")


findElement(loc) Vs findElements(loc)
----------------------------

Scenario1: Locator is smatching with single web element

findElement(loc) ----> single web element ---> WebElement
findElements(loc) ---> single web element ----> List<WebElement>

Sceanrio2 : Locator is matching with multiple web elements

findElement(loc) ---> single web element --> WebElement
findElements(loc) ---> multiple web elements ---> List<WebElement>

Scenario3: Locator is not matching with any element.

findElement(loc) ----> NosuchElementException
findElements(loc)----->will not throw any exception. Returns 0 


Assignment
---------------
Open application "https://www.demoblaze.com/index.html"

1) Total number of links 
2) Total number of images
3) Click on Any product link using linkText /partialLinkText



Direct locators in Selenium are attributes directly present in HTML and are quickly accessible, while customized locators like CSS Selector and XPath offer flexible, powerful ways to target elements when direct identifiers are absent or insufficient.

Direct Locators
id: Uses the unique ID attribute in HTML. Fast and reliable if every element has a unique ID.

driver.findElement(By.id("elementId"));

name: Targets the name attribute, common in forms.

driver.findElement(By.name("elementName"));

linkText: For <a> tags with exact matching of link text.

driver.findElement(By.linkText("Exact Link Text"));

partialLinkText: Locates links using partial matching of the anchor text.

driver.findElement(By.partialLinkText("Partial Text"));

tagName: Finds elements by HTML tag (e.g., div, input).

driver.findElement(By.tagName("input"));

className: Selects elements via their class attribute. Useful for targeting multiple elements sharing a class.

driver.findElement(By.className("classValue"));


Customized Locators (CSS Selector & XPath)
Used when elements lack direct attributes or require complex navigation through the DOM. Can be generated by browser developer tools or written manually for advanced targeting.

CSS Selector
Utilizes CSS syntax for selecting elements based on attributes, hierarchy, and pseudo-classes.

Example: driver.findElement(By.cssSelector("div.content > ul li.active"));

Fast, efficient, and widely supported by browsers.

XPath
XML-style path expressions for navigating elements and attributes in the DOM.

Example: driver.findElement(By.xpath("//button[@type='submit']"));

Flexible for traversing complex nested structures and selecting elements via relationships or custom conditions.

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class LocatorDemo {
    public static void main(String[] args) {
        // Set path to ChromeDriver
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver.exe");

        // Initialize WebDriver
        WebDriver driver = new ChromeDriver();

        // Open a demo page
        driver.get("https://demo.nopcommerce.com/");

        // Locate element by ID
        WebElement searchBox = driver.findElement(By.id("small-searchterms"));
        searchBox.sendKeys("laptop");

        // Locate element by Name
        WebElement searchButton = driver.findElement(By.name("search-button"));
        searchButton.click();

        // Locate element by TagName
        WebElement headerTag = driver.findElement(By.tagName("h1"));
        System.out.println("Header text: " + headerTag.getText());

        // Locate element by ClassName
        WebElement logo = driver.findElement(By.className("header-logo"));
        System.out.println("Logo displayed: " + logo.isDisplayed());

        // Locate element by LinkText
        WebElement registerLink = driver.findElement(By.linkText("Register"));
        registerLink.click();

        // Locate element by PartialLinkText
        WebElement logInLink = driver.findElement(By.partialLinkText("Log"));
        logInLink.click();

        // Locate element by CSS Selector
        WebElement emailField = driver.findElement(By.cssSelector("input#Email"));
        emailField.sendKeys("email@example.com");

        // Locate element by XPath
        WebElement passwordField = driver.findElement(By.xpath("//input[@id='Password']"));
        passwordField.sendKeys("TestPassword123");

        // Close the browser after test
        driver.quit();
    }
}
findElement(loc) returns a single web element and throws an exception if not found, whereas findElements(loc) returns a list of all matching elements and never throws an exception, returning an empty list if none are found.

Detailed Scenarios
Scenario 1: Locator matches a single web element
findElement(loc): Returns that single WebElement.

findElements(loc): Returns a List containing one WebElement.

Scenario 2: Locator matches multiple web elements
findElement(loc): Returns only the first matching WebElement.

findElements(loc): Returns a List of all matched WebElements.

Scenario 3: Locator matches no elements
findElement(loc): Throws a NoSuchElementException.

findElements(loc): Returns an empty List; does not throw any exception.

